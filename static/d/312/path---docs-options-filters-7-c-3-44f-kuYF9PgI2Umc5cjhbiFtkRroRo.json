{"pageContext":{"html":"<h1>Opção filters</h1>\n<blockquote>\n<p>Lista de filtros.</p>\n</blockquote>\n<ul>\n<li>Tipo: <em>Array</em>.</li>\n<li>Valor padrão: <code>[]</code>.</li>\n</ul>\n<p>Isso deve ser uma <em>array</em> contendo todos os filtros que serão usados. Por padrão nenhum filtro é adicionado ― pois existem algumas palavras que não são vistas como de <a href=\"https://goo.gl/KaUXDc\">baixo-calão</a> por todas as pessoas ou para determinadas situações ―, portanto, você deverá criar o seu próprio filtro ou obter um de terceiros.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * Sintaxe.\n */</span>\n<span class=\"token keyword\">const</span> piii <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Piii</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  filters<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n     <span class=\"token comment\">// todos os filtros aqui...</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Criando filtros</h2>\n<p>Para a criação de filtros, é usado <em>arrays</em> que posteriormente serão convertidas em <em>regexs</em>.</p>\n<p>Exemplo simples de filtro:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>O <em>Piii.js</em> interpretará a <em>array</em> acima como <code>(foo|bar)</code>, portanto, com isso, serão filtrados todas as ocorrências de <em>foo</em> e <em>bar</em> denttro de uma <em>string</em>. Veja o exemplo:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> filtro <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> piii <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Piii</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  filters<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    filtro\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\npiii<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo bar baz\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"* * bar\"</span></code></pre></div>\n<blockquote>\n<p><strong>Obs.</strong>: Tudo dentro do filtro deve ser <em>arrays</em> e/ou <em>strings</em> e as <em>strings</em> DEVEM corresponder a expressão regular <code>/^[a-zA-Z]+$/</code>, ou seja, só podem ter letras (sem acentos) ― um erro será lançado caso isso não seja seguido.</p>\n</blockquote>\n<p>Algumas regras do interpretador de filtros para conversão em <em>regexs</em>.</p>\n<ul>\n<li>Uma <em>string</em> retorna uma string.</li>\n<li>\n<p>Uma <em>array</em> de <em>strings</em> retorna-as como alternação.</p>\n<ul>\n<li>Antes disso a <em>array</em> é posta em ordem decrescente.</li>\n</ul>\n</li>\n<li>\n<p>Uma <em>array</em> de <em>arrays</em> retorna-as como alternação.</p>\n<ul>\n<li>Antes disso a <em>array</em> é invertida.</li>\n</ul>\n</li>\n<li>Uma <em>array</em> de <em>strings</em> e <em>arrays</em> retorna-as como continuação.</li>\n</ul>\n<p>Exemplos de cada uma das regras:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"abc\"</span> <span class=\"token comment\">// é como \"abc\"</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"def\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// é como \"(abc|def)\"</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"def\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"jkl\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ghi\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// é como \"((abc|def)|(ghi|jkl))\"</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"ghi\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"def\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// é como \"(abc(def|ghi))\"</span></code></pre></div>\n<h2>Exemplos</h2>\n<p>Supondo que você queira criar um filtro para <em>merda</em>.</p>\n<p>Você pode fazer algo como:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> filtroDeExemplo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">\"merd\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"inha\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"ao\"</span> <span class=\"token comment\">// observe que não tem acento</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> piii <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Piii</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  filters<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    filtroDeExemplo\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Exemplos:</span>\npiii<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Que merda!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Que *!\"</span>\npiii<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Que merdinha!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Que *!\"</span>\npiii<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Que merdão!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Que *!\"</span></code></pre></div>\n<h2>Usando filtros de terceiros</h2>\n<p>Você também pode importar filtros de terceiros para usar. Você pode pesquisar no <em>GitHub</em> por <a href=\"https://git.io/vNxcW\"><code>topic:piii-filter</code></a> para encontrar filtros ― e caso você crie seu próprio filtro e publique-o no <em>GitHub</em> você poderá adicionar <em>piii-filter</em> nos <em>topics</em> do repositório para que ele seja encontrado por outras pessoas.</p>\n<p>Caso queira começar com <em>Piii.js</em> sem ter que fazer muitas configurações você poderá usar o <a href=\"https://ghub.io/piii-filters\"><code>piii-filters</code></a> que já vem com alguns filtros dos palavrões mais usados na língua portuguesa (e visto como de baixo-calão por quase todos).</p>\n<p>Você pode instalá-lo com:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev piii-filters</code></pre></div>\n<p>E usá-lo com:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Piii <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"piii\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> piiiFilters <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"piii-filters\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> piii <span class=\"token operator\">=</span> <span class=\"token function\">Piii</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  filters<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token operator\">...</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>piiiFilters<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\npiii<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Vá se foder!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Vá se *!\"</span></code></pre></div>","title":"Opção filters","currentPath":"/docs/options/filters","filename":"4-opcao_filters.md","links":[{"path":"/docs/instalacao","title":"Instalação"},{"path":"/docs/usando","title":"Usando"},{"path":"/docs/options/aliases","title":"Opção aliases"},{"path":"/docs/options/filters","title":"Opção filters"},{"path":"/docs/options/repeated","title":"Opção repeated"},{"path":"/docs/options/censor","title":"Opção censor"},{"path":"/docs/options/cleaner","title":"Opção cleaner"}]}}
{"data":{"markdownRemark":{"html":"<h1>Opção filters</h1>\n<blockquote>\n<p>Lista de filtros.</p>\n</blockquote>\n<ul>\n<li>Tipo: <em>Array</em>.</li>\n<li>Valor padrão: <code>[]</code>.</li>\n</ul>\n<p>Isso deve ser uma <em>array</em> contendo todos os filtros que serão usados. Por padrão nenhum filtro é adicionado ― pois existem algumas palavras que não são vistas como de <a href=\"https://goo.gl/KaUXDc\">baixo-calão</a> por todas as pessoas ou para determinadas situações ―, portanto, você deverá criar o seu próprio filtro ou obter um de terceiros.</p>\n<pre><code class=\"language-js\">/**\n * Sintaxe.\n */\nconst piii = new Piii({\n  filters: [\n     // todos os filtros aqui...\n  ]\n});\n</code></pre>\n<h2>Criando filtros</h2>\n<p>Para a criação de filtros, é usado <em>arrays</em> que posteriormente serão convertidas em <em>regexs</em>.</p>\n<p>Exemplo simples de filtro:</p>\n<pre><code class=\"language-js\">[\"foo\", \"bar\"]\n</code></pre>\n<p>O <em>Piii.js</em> interpretará a <em>array</em> acima como <code>(foo|bar)</code>, portanto, com isso, serão filtrados todas as ocorrências de <em>foo</em> e <em>bar</em> denttro de uma <em>string</em>. Veja o exemplo:</p>\n<pre><code class=\"language-js\">const filtro = [\"foo\", \"bar\"];\n\nconst piii = new Piii({\n  filters: [\n    filtro\n  ]\n});\n\npiii.filter(\"foo bar baz\") // \"* * bar\"\n</code></pre>\n<blockquote>\n<p><strong>Obs.</strong>: Tudo dentro do filtro deve ser <em>arrays</em> e/ou <em>strings</em> e as <em>strings</em> DEVEM corresponder a expressão regular <code>/^[a-zA-Z]+$/</code>, ou seja, só podem ter letras (sem acentos) ― um erro será lançado caso isso não seja seguido.</p>\n</blockquote>\n<p>Algumas regras do interpretador de filtros para conversão em <em>regexs</em>.</p>\n<ul>\n<li>Uma <em>string</em> retorna uma string.</li>\n<li>\n<p>Uma <em>array</em> de <em>strings</em> retorna-as como alternação.</p>\n<ul>\n<li>Antes disso a <em>array</em> é posta em ordem decrescente.</li>\n</ul>\n</li>\n<li>\n<p>Uma <em>array</em> de <em>arrays</em> retorna-as como alternação.</p>\n<ul>\n<li>Antes disso a <em>array</em> é invertida.</li>\n</ul>\n</li>\n<li>Uma <em>array</em> de <em>strings</em> e <em>arrays</em> retorna-as como continuação.</li>\n</ul>\n<p>Exemplos de cada uma das regras:</p>\n<pre><code class=\"language-js\">\"abc\" // é como \"abc\"\n[\"def\", \"abc\"] // é como \"(abc|def)\"\n[[\"def\", \"abc\"], [\"jkl\", \"ghi\"]] // é como \"((abc|def)|(ghi|jkl))\"\n[\"abc\", [\"ghi\", \"def\"]] // é como \"(abc(def|ghi))\"\n</code></pre>\n<h2>Exemplos</h2>\n<p>Supondo que você queira criar um filtro para <em>merda</em>.</p>\n<p>Você pode fazer algo como:</p>\n<pre><code class=\"language-js\">const filtroDeExemplo = [\n  \"merd\",\n  [\n    \"a\",\n    \"inha\",\n    \"ao\" // observe que não tem acento\n  ]\n];\n\nconst piii = new Piii({\n  filters: [\n    filtroDeExemplo\n  ]\n});\n\n// Exemplos:\npiii.filter(\"Que merda!\"); // \"Que *!\"\npiii.filter(\"Que merdinha!\"); // \"Que *!\"\npiii.filter(\"Que merdão!\"); // \"Que *!\"\n</code></pre>\n<h2>Usando filtros de terceiros</h2>\n<p>Você também pode importar filtros de terceiros para usar. Você pode pesquisar no <em>GitHub</em> por <a href=\"https://git.io/vNxcW\"><code>topic:piii-filter</code></a> para encontrar filtros ― e caso você crie seu próprio filtro e publique-o no <em>GitHub</em> você poderá adicionar <em>piii-filter</em> nos <em>topics</em> do repositório para que ele seja encontrado por outras pessoas.</p>\n<p>Caso queira começar com <em>Piii.js</em> sem ter que fazer muitas configurações você poderá usar o <a href=\"https://ghub.io/piii-filters\"><code>piii-filters</code></a> que já vem com alguns filtros dos palavrões mais usados na língua portuguesa (e visto como de baixo-calão por quase todos).</p>\n<p>Você pode instalá-lo com:</p>\n<pre><code class=\"language-bash\">npm install --save-dev piii-filters\n</code></pre>\n<p>E usá-lo com:</p>\n<pre><code class=\"language-js\">const Piii = require(\"piii\");\nconst piiiFilters = require(\"piii-filters\");\n\nconst piii = Piii({\n  filters: [\n    ...Object.values(piiiFilters)\n  ]\n});\n\npiii.filter(\"Vá se foder!\"); // \"Vá se *!\"\n</code></pre>","frontmatter":{"path":"/docs/options/filters","title":"Opção filters"}}},"pageContext":{}}
{"pageContext":{"html":"<blockquote>\n<p>Alfabeto alternativo para alguns caracteres.</p>\n</blockquote>\n<ul>\n<li>Tipo: <em>Object</em>.</li>\n<li>Valor padrão: <code>{}</code>.</li>\n</ul>\n<p>Isso deve estender algumas letras do alfabeto para reconhecer possíveis formas do filtro ser burlado, por exemplo, a letras <em>A</em> em alguns casos pode ser representado pelos caracteres <em>2</em>, <em>4</em> e <em>@</em> sendo possível compreender a palavra e seu significado, como em <em>c4r4lho</em> é possível entender claramente que representa <em>caralho</em>.</p>\n<h2>Criando aliáses</h2>\n<p>Como visto na opção de criação de filtros, só podemos usar letras de <em>A</em> a <em>Z</em>, portanto, os aliáses também só poderão ser adicionados para palavras de <em>A</em> a <em>Z</em> ― caso contrário um erro será lançado.</p>\n<p>Veja o exemplo:</p>\n<pre><code class=\"language-js\">const Piii = require(\"piii\");\nconst piiiFilters = require(\"piii-filters\");\n\nconst piii = new Piii({\n  filters: [\n    piiiFilters.boceta\n  ],\n  aliases: {\n    a: [\"2\", \"4\", \"@\"]\n    e: [\"3\", \"&#x26;\"],\n    o: [\"0\"]\n  }\n});\n\npiii.filter(\"foo boceta bar\"); // \"foo * bar\";\npiii.filter(\"foo b0c3t4 bar\"); // \"foo * bar\";\npiii.filter(\"foo boc&#x26;ta bar\"); // \"foo * bar\";\n</code></pre>","title":"Opção aliases","links":[{"path":"/docs/options/cleaner","title":"Opção cleaner"},{"path":"/docs/options/censor","title":"Opção censor"},{"path":"/docs/options/aliases","title":"Opção aliases"},{"path":"/docs/instalacao","title":"Instalação"},{"path":"/docs/options/repeated","title":"Opção repeated"},{"path":"/docs/options/filters","title":"Opção filters"},{"path":"/docs/usando","title":"Usando"}]}}